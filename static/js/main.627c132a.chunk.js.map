{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card-component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handlechange","className","type","onChange","Card","props","key","monster","id","alt","src","name","email","CardList","monsters","map","App","updateStateClick","console","log","state","test","setState","updateCounter","count","searchfield","fetch","then","resp","json","data","prev","next","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAgBeA,G,YAbG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,6BACI,2BACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,OCCXI,G,MARF,SAAAC,GAAK,OACd,yBAAKC,IAAKD,EAAME,QAAQC,GAAIP,UAAU,kBAClC,yBAAKQ,IAAI,UAAUC,IAAG,+BAA0BL,EAAME,QAAQC,GAAxC,eACtB,gCAAMH,EAAME,QAAQI,MACpB,4BAAKN,EAAME,QAAQK,UCQZC,G,MAVE,SAACR,GACd,OACI,yBAAKJ,UAAU,aAEPI,EAAMS,SAASC,KAAI,SAAAR,GAAO,OAAI,kBAAC,EAAD,CAAMD,IAAKC,EAAQC,GAAID,QAASA,UCyF/DS,E,YA5Fb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAgDRY,iBAAmB,WACjBC,QAAQC,IAAI,2BACZD,QAAQC,IAAI,EAAKC,MAAMC,MACvB,EAAKC,SAAS,CAAED,KAAM,iBAAkB,WACtCH,QAAQC,IAAI,iBACZD,QAAQC,IAAI,EAAKC,MAAMC,SAEzBH,QAAQC,IAAI,aAAc,EAAKC,MAAMC,OAxDpB,EA0DnBE,cAAgB,WAEV,EAAKH,MAAMI,MAAQ,IACrB,EAAKF,SAAS,CAAEE,MAAO,EAAKJ,MAAMI,MAAQ,KA1D5C,EAAKJ,MAAQ,CACXC,KAAM,MACNG,MAAO,EACPV,SAAU,GACVW,YAAa,IAPE,E,iFAoBE,IAAD,OAGlBC,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAI,EAAKR,SAAS,CAAER,SAAUgB,S,4CAEtBC,EAAMC,GAI1B,GAAID,IAASC,EACX,OAAO,I,gDAMT,OAAO,I,6HA8BC,IAAD,SAG2BC,KAAKb,MAA/BN,EAHD,EAGCA,SAAUW,EAHX,EAGWA,YACZS,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQI,KAAKyB,cAAcC,SAASZ,EAAYa,wBAElD,OACE,yBAAKrC,UAAU,OACb,6CACA,kBAAC,EAAD,CACEF,YAAY,kBACZC,aAAc,SAAAuC,GAAC,OAAI,EAAKjB,SAAS,CAAEG,YAAac,EAAEC,OAAOC,WAE3D,kBAAC,EAAD,CAAU3B,SAAUoB,IANtB,aAOaD,KAAKb,MAAMI,MAAM,6BAC5B,4BAAQkB,QAAST,KAAKhB,kBAAtB,kBAAgE,6BAChE,4BAAQyB,QAAST,KAAKV,eAAtB,kBAA6D,iC,gDAvEnClB,EAAOe,GAIrC,MAAO,CAAEA,a,GAnBKuB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.627c132a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handlechange }) => {\r\n    return (\r\n        <div >\r\n            <input\r\n                className=\"search\"\r\n                type=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={handlechange}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './card-styles.css';\r\n\r\nconst Card = props => (\r\n    <div key={props.monster.id} className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n        <h2> {props.monster.name}</h2>\r\n        <p2>{props.monster.email}</p2>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card-component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                props.monsters.map(monster => <Card key={monster.id} monster={monster} />)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport SearchBox from './components/search-box/search-box.component';\nimport CardList from './components/card-list/card-list.component';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      test: 'abc',\n      count: 0,\n      monsters: [],\n      searchfield: ''\n    }\n    // console.log('constructor');\n    // console.log('props ', props);\n    // console.log('state ', this.state);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // console.log('getDerivedStateFromProps');\n    // console.log(state);\n    // console.log(props);\n    return { state };\n  }\n  componentDidMount() {\n    // console.log('componentDidMount');\n    // console.log(this.state);\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(resp => resp.json())\n      .then(data => this.setState({ monsters: data }));\n  }\n  shouldComponentUpdate(prev, next) {\n    // console.log('shouldComponentUpdate');\n    // console.log(this.state);\n    // console.log(prev, next);\n    if (prev !== next) {\n      return true;\n    }\n  }\n  getSnapshotBeforeUpdate() {\n    // console.log('getSnapshotBeforeUpdate');\n    // console.log(this.state);\n    return true;\n  }\n  componentDidUpdate() {\n    // console.log('componentDidUpdate');\n    // console.log(this.state);\n\n  }\n  componentWillUnmount() {\n    // console.log('componentWillUnmount');\n    // console.log(this.state);\n  }\n  updateStateClick = () => {\n    console.log('before updateStateClick');\n    console.log(this.state.test);\n    this.setState({ test: 'updated_abc1' }, () => {\n      console.log('cb stateClick');\n      console.log(this.state.test);\n    });\n    console.log('post updt ', this.state.test);\n  }\n  updateCounter = () => {\n    // console.log('beforeCounterUpdt', this.state.count);\n    if (this.state.count < 10) {\n      this.setState({ count: this.state.count + 1 });\n    }\n    // console.log('postCounterUpdt', this.state.count);\n  }\n\n\n\n  render() {\n    // console.log('render');\n    // console.log(this.state);\n    const { monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchfield.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Search people</h1>\n        <SearchBox\n          placeholder=\"Search monsters\"\n          handlechange={e => this.setState({ searchfield: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters} />\n        Counter : {this.state.count}<br />\n        <button onClick={this.updateStateClick} > Update State </button><br />\n        <button onClick={this.updateCounter} >Update Counter</button><br />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}